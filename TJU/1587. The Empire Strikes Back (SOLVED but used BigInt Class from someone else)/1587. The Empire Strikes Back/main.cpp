 /////////////////////////////// NOT MY BIG INT CLASS
#include <iostream>
#include <fstream>
#include <map>
#include <vector>
#include <cstdlib>
#include <iomanip>
#include <string>
#include <ctime>
using namespace std;
 
const int base = 1000000000;
const int base_digits = 9;
 
struct bigint {
    vector<int> a;
    int sign;
 
    bigint() :
        sign(1) {
    }
 
    bigint(long long v) {
        *this = v;
    }
 
    bigint(const string &s) {
        read(s);
    }
 
    void operator=(const bigint &v) {
        sign = v.sign;
        a = v.a;
    }
 
    void operator=(long long v) {
        sign = 1;
        if (v < 0)
            sign = -1, v = -v;
        for (; v > 0; v = v / base)
            a.push_back(v % base);
    }
 
    bigint operator+(const bigint &v) const {
        if (sign == v.sign) {
            bigint res = v;
 
            for (int i = 0, carry = 0; i < (int) max(a.size(), v.a.size()) || carry; ++i) {
                if (i == (int) res.a.size())
                    res.a.push_back(0);
                res.a[i] += carry + (i < (int) a.size() ? a[i] : 0);
                carry = res.a[i] >= base;
                if (carry)
                    res.a[i] -= base;
            }
            return res;
        }
        return *this - (-v);
    }
 
    bigint operator-(const bigint &v) const {
        if (sign == v.sign) {
            if (abs() >= v.abs()) {
                bigint res = *this;
                for (int i = 0, carry = 0; i < (int) v.a.size() || carry; ++i) {
                    res.a[i] -= carry + (i < (int) v.a.size() ? v.a[i] : 0);
                    carry = res.a[i] < 0;
                    if (carry)
                        res.a[i] += base;
                }
                res.trim();
                return res;
            }
            return -(v - *this);
        }
        return *this + (-v);
    }
 
    void operator+=(const bigint &v) {
        *this = *this + v;
    }
    void operator-=(const bigint &v) {
        *this = *this - v;
    }
    void operator*=(const bigint &v) {
        *this = *this * v;
    }

 
    bool operator<(const bigint &v) const {
        if (sign != v.sign)
            return sign < v.sign;
        if (a.size() != v.a.size())
            return a.size() * sign < v.a.size() * v.sign;
        for (int i = a.size() - 1; i >= 0; i--)
            if (a[i] != v.a[i])
                return a[i] * sign < v.a[i] * sign;
        return false;
    }
 
    bool operator>(const bigint &v) const {
        return v < *this;
    }
    bool operator<=(const bigint &v) const {
        return !(v < *this);
    }
    bool operator>=(const bigint &v) const {
        return !(*this < v);
    }
    bool operator==(const bigint &v) const {
        return !(*this < v) && !(v < *this);
    }
    bool operator!=(const bigint &v) const {
        return *this < v || v < *this;
    }
 
    void trim() {
        while (!a.empty() && !a.back())
            a.pop_back();
        if (a.empty())
            sign = 1;
    }
 
    bool isZero() const {
        return a.empty() || (a.size() == 1 && !a[0]);
    }
 
    bigint operator-() const {
        bigint res = *this;
        res.sign = -sign;
        return res;
    }
 
    bigint abs() const {
        bigint res = *this;
        res.sign *= res.sign;
        return res;
    }
 
    long long longValue() const {
        long long res = 0;
        for (int i = a.size() - 1; i >= 0; i--)
            res = res * base + a[i];
        return res * sign;
    }
 


    void read(const string &s) {
        sign = 1;
        a.clear();
        int pos = 0;
        while (pos < (int) s.size() && (s[pos] == '-' || s[pos] == '+')) {
            if (s[pos] == '-')
                sign = -sign;
            ++pos;
        }
        for (int i = s.size() - 1; i >= pos; i -= base_digits) {
            int x = 0;
            for (int j = max(pos, i - base_digits + 1); j <= i; j++)
                x = x * 10 + s[j] - '0';
            a.push_back(x);
        }
        trim();
    }
 
    friend istream& operator>>(istream &stream, bigint &v) {
        string s;
        stream >> s;
        v.read(s);
        return stream;
    }
 
    friend ostream& operator<<(ostream &stream, const bigint &v) {
        if (v.sign == -1)
            stream << '-';
        stream << (v.a.empty() ? 0 : v.a.back());
        for (int i = (int) v.a.size() - 2; i >= 0; --i)
            stream << setw(base_digits) << setfill('0') << v.a[i];
        return stream;
    }
 
    static vector<int> convert_base(const vector<int> &a, int old_digits, int new_digits) {
        vector<long long> p(max(old_digits, new_digits) + 1);
        p[0] = 1;
        for (int i = 1; i < (int) p.size(); i++)
            p[i] = p[i - 1] * 10;
        vector<int> res;
        long long cur = 0;
        int cur_digits = 0;
        for (int i = 0; i < (int) a.size(); i++) {
            cur += a[i] * p[cur_digits];
            cur_digits += old_digits;
            while (cur_digits >= new_digits) {
                res.push_back(int(cur % p[new_digits]));
                cur /= p[new_digits];
                cur_digits -= new_digits;
            }
        }
        res.push_back((int) cur);
        while (!res.empty() && !res.back())
            res.pop_back();
        return res;
    }
 
    typedef vector<long long> vll;
 
    static vll karatsubaMultiply(const vll &a, const vll &b) {
        int n = a.size();
        vll res(n + n);
        if (n <= 32) {
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    res[i + j] += a[i] * b[j];
            return res;
        }
 
        int k = n >> 1;
        vll a1(a.begin(), a.begin() + k);
        vll a2(a.begin() + k, a.end());
        vll b1(b.begin(), b.begin() + k);
        vll b2(b.begin() + k, b.end());
 
        vll a1b1 = karatsubaMultiply(a1, b1);
        vll a2b2 = karatsubaMultiply(a2, b2);
 
        for (int i = 0; i < k; i++)
            a2[i] += a1[i];
        for (int i = 0; i < k; i++)
            b2[i] += b1[i];
 
        vll r = karatsubaMultiply(a2, b2);
        for (int i = 0; i < (int) a1b1.size(); i++)
            r[i] -= a1b1[i];
        for (int i = 0; i < (int) a2b2.size(); i++)
            r[i] -= a2b2[i];
 
        for (int i = 0; i < (int) r.size(); i++)
            res[i + k] += r[i];
        for (int i = 0; i < (int) a1b1.size(); i++)
            res[i] += a1b1[i];
        for (int i = 0; i < (int) a2b2.size(); i++)
            res[i + n] += a2b2[i];
        return res;
    }
 
    bigint operator*(const bigint &v) const {
        vector<int> a6 = convert_base(this->a, base_digits, 6);
        vector<int> b6 = convert_base(v.a, base_digits, 6);
        vll a(a6.begin(), a6.end());
        vll b(b6.begin(), b6.end());
        while (a.size() < b.size())
            a.push_back(0);
        while (b.size() < a.size())
            b.push_back(0);
        while (a.size() & (a.size() - 1))
            a.push_back(0), b.push_back(0);
        vll c = karatsubaMultiply(a, b);
        bigint res;
        res.sign = sign * v.sign;
        for (int i = 0, carry = 0; i < (int) c.size(); i++) {
            long long cur = c[i] + carry;
            res.a.push_back((int) (cur % 1000000));
            carry = (int) (cur / 1000000);
        }
        res.a = convert_base(res.a, 6, base_digits);
        res.trim();
        return res;
    }
};

map<pair<int, int>, bigint> preList;
map<pair<int, int>, bigint>::iterator it;

bigint list[300];

int input;				

bigint getRoutes( int width, int height );

int main()
{
	bigint output;

	list[0] = bigint("1");
	list[10] = bigint("58786");
	list[20] = bigint("24466267020");
	list[30] = bigint("14544636039226909");
	list[40] = bigint("10113918591637898134020");
	list[50] = bigint("7684785670514316385230816156");
	list[60] = bigint("6182127958584855650487080847216336");
	list[65] = bigint("5632681584560312734993915705849145100");
	list[70] = bigint("5175569924646105559418940193995065716350");
	list[75] = bigint("4790408930363303911328386208394864461024520");
	list[80] = bigint("4462290049988320482463241297506133183499654740");
	list[85] = bigint("4180080073556524734514695828170907458428751314320");
	list[90] = bigint("3935312233584004685417853572763349509774031680023800");
	list[95] = bigint("3721443204405954385563870541379246659709506697378694300");
	list[100] = bigint("3533343320884635898708258511468514257188006702535057407320");
	list[105] = bigint("3366939372774715522158184331074634818182181954352680060985040");
	list[108] = bigint("206709359781542193322705891717290023323187260396682873976707440");
	list[111] = bigint("12704920022590345879098861442746675573493602966676969141151592440");
	list[114] = bigint("781708976802233823680102715669100177152510806064194216284009188600");
	list[117] = bigint("48145535217206784075634048230802707999063631776107012034556858076000");
	list[120] = bigint("2968129521136642608343357241290264314659358135849980153205484311031600");
	list[123] = bigint("183149331181095806425878953139148487114152581147038684080813476376374624");
	list[126] = bigint("11311095732253345760960290897769189975961199415637572612957718759342193629");
	list[129] = bigint("699138751524213124094312216825551629561424593205010237977696200916445964684");
	list[132] = bigint("43247909631719355347185999181748231619129200590055369794426007640095877732860");
	list[135] = bigint("2677285562879644352897777603522480091364515660984549685943453807118230006063172");
	list[138] = bigint("165858552441704085803306019163479760555270300042632151407422816318048496669015180");
	list[141] = bigint("10282088127575012633735978459444359117193900861809983856381541729425708916192792880");
	list[144] = bigint("637841185472509493966277041641953081675754238090104091048544721209706145413312768740");
	list[147] = bigint("39593131470570019928884900188787576804513637926117934749025519709205419589642069387800");
	list[150] = bigint("2459190531075380210068954346998805293538604859334653976565195030202642573769058652355724");
	list[153] = bigint("152833710987466856077941533426350552418470728645416481987654604282710881174212911428710416");
	list[155] = bigint("2398688027467675551565262685079023638226787285986588029157540391468925848433886424201803408");
	list[157] = bigint("37656021983627970863239722065976647657188136686863728482571084292154883214129294163550164320");
	list[159] = bigint("591287253268697406460153791067974618173577010277285840891775738645276126593539846847932184244");
	list[161] = bigint("9286743358427380624707736956646339822175412429990127674192529562971773783776110268989495214568");
	list[163] = bigint("145890413956669604714089393210286735343930813894634267342913685041363674629830911875367125488280");
	list[165] = bigint("2292377200702310552450706418181518677183279951275056212304445189714950263835792002354174244073040");
	list[167] = bigint("36027914711798570537987962028774206259957846571497449389070496356530188318146206934716808649981400");
	list[169] = bigint("566348408726522751148449775858720556691622190005859389137334807741187245136563759042704144561379440");
	list[171] = bigint("8904665805871794668984558560796280746380186343548236554868946245171727887203643896882888138235330480");
	list[173] = bigint("140035739500813385720523668716680032781990674301198967378145931000424749296103018602999665480307729184");
	list[175] = bigint("2202649981138949529709608229856778034894847921317741692970659784491657853623950138141866464005163908232");
	list[177] = bigint("34652574525946577153419064129621761275858121556704889869389019006160580494242082927782059624230382921360");
	list[179] = bigint("545264322770889032254591469127650557446016504981211639082934910114985694031129290886842493262153292369584");
	list[181] = bigint("8581405470349560013659812633026447126571589606948047417323610091418731796423620448650033128511662029903008");
	list[183] = bigint("135078985873169836854265593567221824305510844394679869775274287872620002090473099553339034985873053726869264");
	list[185] = bigint("2126637696170556896729584899518038126111221791361885974626562559424277576468711040854759421600947062521381792");
	list[187] = bigint("33486822892249988284369096906460157929731751442839558786546261172967558933756721472425923009842673687963332000");
	list[189] = bigint("527384702707451647951006852938632873571106292797712281961762406743138464936011202440852373371766408879279665600");
	list[191] = bigint("8307162993650633292741231973376956477775965410613187534618550915282706629842137596478465120847179369914845276700");
	list[193] = bigint("130872402880145504356540296893819680719664812725806172531904942492471252901224350112324494917327569677024834470200");
	list[195] = bigint("2062111427086631209688741595074389269427152009818957115500902294433065896096894481273639630418585519559287299086600");
	list[197] = bigint("32497017144692472040610304198911001293287035403710045969725655314584740305629299507691330189130411971857871567302000");
	list[199] = bigint("512201493211017079467541693136328292324432464582475861864920694407578768023144072628540276213813397768975366156750120");
	list[201] = bigint("8074262098949421362063419034864172172316759457047441516359242937945466677934365855629907258155478370936909339806788240");
	list[202] = bigint("32059570098769761290545928520784213037140074314747194256132288135959941221209982073824631760323222943425963555115188600");
	list[203] = bigint("127299951514139442392704321053260241035278148742459590851178939232543376361292319063869513428795626711945045531042748880");
	list[204] = bigint("505492040478476038238990944764887753237172454715203618040118312098157678949209305797307097013372925487238093419383342640");
	list[205] = bigint("2007316218711629485180920563269264411405583370898054946999890108911524696117149996934233979444408428746423733288565737440");
	list[206] = bigint("7971361522383682474805001852213521172216403194047083587605332836350574033619066814748448399139814241079548094694015861180");
	list[207] = bigint("31656603175016538057838045633192452502103419383057796065609694996033380133511126584886182637732276651177152720555182606600");
	list[208] = bigint("125721938323637108286842524086107168508353579835572390089135645841389709673087045579976553904136755843246406518776296637640");
	list[209] = bigint("499312721873023207319308223621600982037916113280614516088605076848742069696904948796304986595576309936684780392106808447120");
	list[210] = bigint("1983119395363611040390837378723528428660025317840931238427384314653966144739594183426833956195637985691927288161103456190920");
	list[211] = bigint("7876615063275187512538255504225845308198973797621726890655244742710119053754444503188270079537604393874978806499030628814640");
	list[212] = bigint("31285620578429483110549145694354993046584709009245176902135317903287856054632139381822568072929737078475383109926056235946000");
	list[213] = bigint("124269395227808272448413815920833321217596937180908749183365402276315484049562079218960340159451141697758033376171404769757600");
	list[214] = bigint("493625653266016193336754879907754581503232278246387531478368125708697617196871592453092462300042035077205521466458635613203800");
	list[215] = bigint("1960853977489889210397616158896241701639567851835880424582273384151600672920291763569427200472978037956456956240033842850606800");
	list[216] = bigint("7789447451863504844974016484422684924861769539861800218753434636125165975912718657115247502796325600322439101393895907837731600");
	list[217] = bigint("30944380288224882260855681924418885317944015980272904978609534855839700452256005624156462682341567453335716978140134428396468000");
	list[218] = bigint("122933583508675214072672118190645935308559408939811449778657879381835900887598858706876129019847863428251893813156715865538695600");
	list[219] = bigint("488396770681524153646181537427091091406855932349115171518830851118786972757066959025507879092427258325815216144577359863995360800");
	list[220] = bigint("1940387170004974340161856378426551092886697893387025140899138786877342837710509269641882654772616404699860453331158700000197784800");
	list[221] = bigint("7709340953472678320104954041640916001334593423950243384917654552346752261038166874003175031966538720018279648661016180269844113600");
	list[222] = bigint("30630863609779837968274147754733996612445482800516592020431752462449149608589145169030472225224194021501200389769216073393577058500");
	list[223] = bigint("121706631409525222860609280412143079873450051660719258961182163117464621111460870138281076308224130912098102882016351864950479512440");
	list[224] = bigint("483595376131653319154102361991612768700699762793477409500626471148155883885362218514054896127368449376389807026772937941263409744120");
	list[225] = bigint("1921599247888772219722468416371959107348155004580249442156674347910293424073113308809152054215358331883275797084357665299645795547120");
	list[226] = bigint("7635828590294858031002440286109626979199247518200464888569942803538271237764213411320577899645239687220385404203631775269645134937240");
	list[227] = bigint("30343248983267776455075199390217294982844171360534598465496279262968676097665651547169108684179773429565723658625785657185052719619600");
	list[228] = bigint("120581432916116294260603183663733076583998141841428795641146083679797260666375676148315501466697012672274223582538991698552774720575280");
	list[229] = bigint("479193746393916701866812651962367810840304303941262486573905215662570931998843596121877187646873842567739122289051057918924013824623840");
	list[230] = bigint("1904382043858582754832764073746996213770519690663120744056640555348665514236783601829184340562145184687308063579763256039861813561651640");
	list[231] = bigint("7568488294476599274571414301672611562023610444437982012860296799368516163876659293106543774079598459315224321351333798682025919991800080");
	list[232] = bigint("30079889375483920193809467096391148515734862022766338769060153946208205266689286934141391922624045158816917174601454840915744040993051600");
	list[233] = bigint("119551560326391410472417201140550351973176004805377703873626313981950909442926782963778978960556843312063832515224505623043850784202171040");
	list[234] = bigint("475166794856589589081048028262017924367962256387475789124836790318093021429937806864511365529670843333541842793561806247521745913481510320");
	list[235] = bigint("1888637640316064949005684568028780104449875297540093642850617115947863401632917358929829984510337276034584033382005153945845926795356889120");
	list[236] = bigint("7506937847642846393946964711576579742897403493583733555196150385238146125818234544317727585490668332473598720921751578288950616589947971040");
	list[237] = bigint("29839292699835581900626010359823224919466666606295175219398924125423593387143610113396825130611443162551961442994410039223862283516529592000");
	list[238] = bigint("118611188481846438054988391180297319054879999760023321497110723398558783713895850200752379894180486571144046735902779905914852576978205128200");
	list[239] = bigint("471491778280534803554684144193878969521058256307478597486440136995100891277644085030376680243256871930107870427364577385337878708485977231600");
	list[240] = bigint("1874277234321795376114074986423601523468008440362786821413038891691268832268981858674472588405012854532081699798036047292128261642824421887600");
	list[241] = bigint("7450830487057013717391754884301230747613564417244658722160475594130723012229779734483705845264372088386793917715649471951423459864067454911200");
	list[242] = bigint("29620104805103702073237714089230302562234251986587372788916644779945907056815107960857355204534593957931106967967950769642953918312071439606000");
	list[243] = bigint("117755028898657166609524626624123733451494536469126943250631885778233932544236388383163526404966100061326115048166465508703008638514112580311200");
	list[244] = bigint("468148041719051662374451564383711428112039254743114432923243838581759292797817836742820848878279861219418457386613021412648546538482935380261600");
	list[245] = bigint("1861220149668456406687090834918237337676204648411896247492410726669180670151648241625303941694213861204327632201028287559598674901984787625169600");
	list[246] = bigint("7399851078923782326586578883989443608664265255379555242046439421354081212780343412268345510122963173981721957057314078765178602634504034671037200");
	list[247] = bigint("29421094651142749009320132912247185432038644991268111203317168783696949400211003928295831546272022257999617419625465614367577576739594354716172000");
	list[248] = bigint("116978272332943570061056848459094809277785652485282010144389063083979070815238951618904226227977560497806478860430851282725488445116627154351499872");
	list[249] = bigint("465116795969233796497747947259667807407291160080922096111953326525143875193659257831340309862635877995262413955019878805418475969029457769094808256");
	list[250] = bigint("1849392974449096286074378742675345805643276755559856905968957274516643503746216572805567422549052181552591026916388565726306797305426653510448404256");
	list[251] = bigint("7353712775872691161228557372060861187656665676257770938358778727919934248097604238112256233534966381983820446948169553836619122882447483919016184512");
	list[252] = bigint("29241141352879598711971822621186888974540284775670663967489631949602888151884174332651097621536677345683695478022249013287343756343590388811836009280");
	list[253] = bigint("116276538556156521937017365246601982039936661813843346129547007046656190533374716758071423483287022856953989077312001958719084584048630016687065542784");
	list[254] = bigint("462380922852216169265170616488440694205685631744111431093276770208968757667872897108268394945258551829606097190248507788968859791255880300732159072477");
	list[255] = bigint("1838728806050447178945542295919013188631170099776194095631629802153953581076132688111479765113051517392441367036708073775588228430597313880732554755142");
	list[256] = bigint("7312154089177359711620644944236075703626281094458818380302527817868047961953923015513093949635623476142034273564583270130827606084468387758262020072774");
	list[257] = bigint("29079222825686025107989437423023775964228067672944335643674145376077565254102473768256705668435104943730869891009732695887075035779932198420887570173580");
	list[258] = bigint("115645832314459038314081070366948401334660853745478627136765639687939240279776761062990129466007301968529690258861783105950906103832499589104606721382622");
	list[259] = bigint("459924804377043991456000578700737320250490291907305804474953003816402036055204130204535457416534787139210032523749160398379465654322354687703378455153876");
	list[260] = bigint("1829166588400304729378445049641863693515308718196231481919469580063705807517262227760022697053546748851362037747124523416455737449633181620560764695688316");
	list[261] = bigint("7274936317363949608098302364735321001585600453358395931892643272800898382749263460977124490943003419386025442903012363093584415864320562642990721945589272");
	list[262] = bigint("28934405807697526850390975314288208529033638166766347456391194835003573113207297856159017861705127236194419375182435535031301654005820419602804007738139150");
	list[263] = bigint("115082504608729031321932407476451969017363979727440491392589884362617985137058460152421150287687562667731766118650139826124497899328810272684360091154711940");
	list[264] = bigint("457734172466298177212798823722128508347259738915909924411128186675375294266946807673915703023960305648346648697488150135487664577029628828947567580607839220");
	list[265] = bigint("1820650528686174772284615546040825752302583680631821497095948068349245552477518763107484931129010653927131613920346125258007115283915602308398190152080618920");
	list[266] = bigint("7241841282012919056923134970445971089382664938632543716060748659926476712466548512957384091729572227934038434474212572854610391390500119629673398142231118540");
	list[267] = bigint("28805837069716815579582730179840851545128072432478891361282531844317212202004486650053535234760751984719037638986644806522056203672249546482344000045305936200");
	list[268] = bigint("114583218566206888638784637826478053923953888120304923414879404447395132981306735785768506822714991228104616386191320452609956899051837084896435022402439168440");
	list[269] = bigint("455795976436793453699667304711968052140303658279294123399409586694804255918260742350769189501427160678585891012229680619607134823534613939182128982102691599920");
	list[270] = bigint("1813129582737538665084705969479225854469884405361015593816769017660949282733669570674750967060824220052315934100119538347113676025972251037481851318511442320270");
	list[271] = bigint("7212669329131747217150149021444832519979100601546018076501872355969930113731740489936921429406795248999322726859816185512693963971450053577675056893419144175140");
	list[272] = bigint("28692735652385417761655702311587107469989852757975035413821317036522714686013128226391402766618273070836721796632115482514001535506863351823597854065061558944900");
	list[273] = bigint("114144919286216898295459412105004711171523268789907959064438257592566726787266771926080707733383239052710449620056488501346609744889121843254603826717008529038984");
	list[274] = bigint("454098265856036791044979835113388307486712134533764271930265242161732847871083027445060206852372451014043745227616030342313686593798028202512880441069838278568132");
	list[275] = bigint("1806556999903799796864865625613552039170963076737213818292968580730070752180265329402369487188860797897026018919974243455702825365940169960899618216819356617263832");
	list[276] = bigint("7187237560768354587527127273124419263752104902414958572057637590962080042846667101866980765578705188755794161602487457777004765664495784089046682546051109419761864");
	list[277] = bigint("28594385994454744057903624635011130404175041009607899695283074286623329202723299222481536379184095912254234836483014616962277024686703657128465296150956026723783760");
	list[278] = bigint("113764807135080660287516563726437140250896413159654286644804802697494245470834840478015826880039581593754348599435993868914202162503528121575394071114875049179625388");
	list[279] = bigint("452630086750961488261364833616216095375452633140546236544098823543767140343036838627835211572541822853442568449001569912619494724836101209684308083652776886059861864");
	list[280] = bigint("1800889919626165921380323912473029996493822178665577579441414468142222452003146570710748607746070656884973623403474331354464798160518104812999268332831261227514769544");
	list[281] = bigint("7165378266781140733124539665882091081455985064231238001593755092325591805496618511025805414565638019973428621739618717685962412469057901128753272589286219583680673168");
	list[282] = bigint("28510131836136228973347640219882968035370644797821475147186419909605347676799925765701268022743559727359064586499187151356118049612800803786940838119343056794222396760");
	list[283] = bigint("113440314042731521599214821085429072814422144563963343217225965535061278124530230941421887501021742915176067512596765718027501292143565303489090913780122899665432273424");
	list[284] = bigint("451381389442756893636036595787476520499344057740525470563647373352796274495508401438245132783785816214931345557115802052850686959648172431365683426160069439927489255792");
	list[285] = bigint("1796089013044001298022138649440063367283104229754982882869983624978722458097110085165421399439314989956277340161067059039566148111213285423761708964023690942150497317472");
	list[286] = bigint("7146937531070921831713093375896918815647352247566702721420143174394499781178083880554072651935607564201020249390912672428273631025869531582051800252677603540640520575774");
	list[287] = bigint("28439370798379100714429264298551753072645173303466118095616486680116521620604832050647693943688403802183990611763147312430846628649653845395707855676744789175559164920900");
	list[288] = bigint("113169082418377524911901279312168010502870793076551380283935950444325744655786124780853237279366958578345948848188524132914472446419657026160851260175736161064121642478340");
	list[289] = bigint("450342946530863140371071070252544866537197176572668379274219349190822035434365403767106696802429340322077693354647116652628725405340078475238026664204475857430422206150920");
	list[290] = bigint("1792118163934462222983508848059784708617202462936440605193982478629230154707988353347184868782270183062514656431849142295734859318510860233652695150019181323062159601189620");
	list[291] = bigint("7131773990264788232077717804906856553746273282538872852068885904715639455254315426630776645051628100514990066210020818828760566434756529120952363634547322261742246057976440");
	list[292] = bigint("28381549553094565413370509631772184244500475308062861350070056151419381505603908330469417260919744481641286998182735911665475723566888228134402263443606690633464040434804200");
	list[293] = bigint("112948946357061084051854163754917099332351044107341692288075409904292725042640638576173206319728067869311426901242481221339893218533989084168773753500997473910802655832068240");
	list[294] = bigint("449506279758844449368527719267879537207802466075839572687002813740732534122400919738959584610269134966381286789404198914656737200787294395779782032514104811712586245169514820");
	list[295] = bigint("1788944184090754677284847690823682198584587592261422137764435440543925438830565276536869457943899385623780070656820751236108630879900949413507415361722800967825848288856452920");
	list[296] = bigint("7119757725945084051207481078244587542017855316852505554995370578809045538433055093868212003763304266274507261070434264986660524240142704712818102748333026670608912988536084440");
	list[297] = bigint("28336159511286454919521412986993508946492467649011644182088598624691519032559650708037365499927532029654393447069621322187712454333678323104526897225807029224162563399190436400");
	list[298] = bigint("112777914854920090579695223688234165607040021243066343844712622526272245749587409817988714689711577478024485919337092862307095568248039725956017050958711976312167002328777936872");
	list[299] = bigint("448863594671741755862042783981742625904431712455792292112842929523169934910317996551330498997589600726489482164006103817421596314821101633539230654646302151568026806610883615856");


	/*
	for ( int i = 0; i < 300; i++ )
	{
		preList.insert( make_pair( make_pair( i+1, i+1 ), list[i] ));
	}
	*/
	
	
	for ( int i = 0; i < 300; )
	{
		preList.insert( make_pair( make_pair( i+1, i+1 ), list[i] ));
		
		if ( i <= 50 )
		{
			i += 10;
		}
		else if ( i <= 100 )
		{
			i += 5;
		}
		else if ( i <= 150 )
		{
			i += 3;
		}
		else if ( i <= 200 )
		{
			i += 2;
		}
		else
		{
			i++;
		}
	}
	
	
	
	while ( cin >> input )
	{
		if ( input == 0 )
		{
			return 0;
		}
		output = getRoutes( input, input );
		output *= 2;
		cout << output << endl;
	}
	
	

	/*
	ofstream myFile;
	myFile.open( "testCases.txt" );
	
	for ( int i = 0; i < 300;  )
	{
		output = getRoutes( i+1, i+1 );
		myFile << "list["<< i << "] = " << "bigint(\"" << output << "\");" << endl;
		
		if ( i <= 50 )
		{
			i += 10;
		}
		else if ( i <= 100 )
		{
			i += 5;
		}
		else if ( i <= 150 )
		{
			i += 3;
		}
		else if ( i <= 200 )
		{
			i += 2;
		}
		else
		{
			i++;
		}
	}
	myFile.close();
	*/

	return 0;
}

bigint getRoutes( int width, int height )
{
	bigint result = 0;
	int widthOri = width;
	int heightOri = height;

	if ( width == 1 && height <= 1)
	{
		return 1;
	}

	it = preList.find( make_pair( width, height ) );
	if ( it != preList.end() )
	{
		return it->second;
	}

	if ( width == height )
	{
		height--;
	}
	width--;

	for ( int i = height; i >= 0; i-- )
	{
		result += getRoutes( width, i );
	}

	preList.insert( make_pair( make_pair( widthOri, heightOri ), result ));

	return result;
}
